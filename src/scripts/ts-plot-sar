#!/bin/sh
#
# Copyright 2018,2019 PostgreSQL Global Development Group
#

SIZE="800,500"

usage() {
	echo "Usage: `basename $0` <options>"
	echo
	echo "Options:"
	echo "  -i <path>  Path to sar data"
	echo "  -s <x,y>   Size of charts, default 800x500"
}

plot_blockdev_io() {
	local FILE=$1
	local PLOTLINES=$2
	local DEV=$3

	gnuplot <<- __EOF__
		set datafile separator ";"
		set title "Block Device I/O $DEV"
		set xdata time
		set timefmt "%s"
		set terminal pngcairo size $SIZE
		set output '$FILE'
		set xlabel "Time"
		set ylabel "sec/s"
		set yrange [0:*]
		set xtics rotate
		set key below
		set grid
		plot $PLOTLINES
	__EOF__
	if [ $? -ne 0 ]; then
		exit 1
	fi
}

plot_blockdev_rd() {
	local FILE=$1
	local PLOTLINES=$2

	gnuplot <<- __EOF__
		set datafile separator ";"
		set title "Block Device Reads"
		set xdata time
		set timefmt "%s"
		set terminal pngcairo size $SIZE
		set output '$FILE'
		set xlabel "Time"
		set ylabel "sec/s"
		set yrange [0:*]
		set xtics rotate
		set key below
		set grid
		plot $PLOTLINES
	__EOF__
	if [ $? -ne 0 ]; then
		exit 1
	fi
}

plot_blockdev_tps() {
	local FILE=$1
	local PLOTLINES=$2

	gnuplot <<- __EOF__
		set datafile separator ";"
		set title "Block Device Transactions"
		set xdata time
		set timefmt "%s"
		set terminal pngcairo size $SIZE
		set output '$FILE'
		set xlabel "Time"
		set ylabel "tps"
		set yrange [0:*]
		set xtics rotate
		set key below
		set grid
		plot $PLOTLINES
	__EOF__
	if [ $? -ne 0 ]; then
		exit 1
	fi
}

plot_blockdev_util() {
	local FILE=$1
	local PLOTLINES=$2

	gnuplot <<- __EOF__
		set datafile separator ";"
		set title "Block Device Utilization"
		set xdata time
		set timefmt "%s"
		set terminal pngcairo size $SIZE
		set output '$FILE'
		set xlabel "Time"
		set ylabel "% Utilization"
		set yrange [0:100]
		set xtics rotate
		set key below
		set grid
		plot $PLOTLINES
	__EOF__
	if [ $? -ne 0 ]; then
		exit 1
	fi
}

plot_blockdev_wd() {
	local FILE=$1
	local PLOTLINES=$2

	gnuplot <<- __EOF__
		set datafile separator ";"
		set title "Block Device Writes"
		set xdata time
		set timefmt "%s"
		set terminal pngcairo size $SIZE
		set output '$FILE'
		set xlabel "Time"
		set ylabel "sec/s"
		set yrange [0:*]
		set xtics rotate
		set key below
		set grid
		plot $PLOTLINES
	__EOF__
	if [ $? -ne 0 ]; then
		exit 1
	fi
}

plot_blockdev() {
	# Plot % util, reads, writes

	mkdir -p blockdev

	local CSVFILE="sar-blockdev.csv"
	local DATAFILES=""
	local IOPLOTLINES=""
	local RDPLOTLINES=""
	local TPSPLOTLINES=""
	local UTILPLOTLINES=""
	local WDPLOTLINES=""

	local DEVICES=`awk -F ";" 'NR > 1 {print $4}' $CSVFILE | sort | uniq`
	for DEV in $DEVICES; do
		local DATAFILE=`tempfile`

		DATAFILES="$DATAFILES $DATAFILE"
		awk -F ";" "NR == 1 || \$4 == \"$DEV\"" $CSVFILE > $DATAFILE

		local PLOTFILE="blockdev/sar-per-blockdev-io-${DEV}.png"
		if [ ! "x$IOPLOTLINES" = "x" ]; then
			IOPLOTLINES="$IOPLOTLINES,"
		fi
		THISPLOTLINE=" \"$DATAFILE\" using 3:6"
		THISPLOTLINE=" $THISPLOTLINE title \"Reads\" with lines, "
		THISPLOTLINE=" $THISPLOTLINE \"$DATAFILE\" using 3:7"
		THISPLOTLINE=" $THISPLOTLINE title \"Writes\" with lines"
		IOPLOTLINES="$IOPLOTLINES $THISPLOTLINE"
		plot_blockdev_io $PLOTFILE "$THISPLOTLINE" $DEV

		local PLOTFILE="blockdev/sar-per-blockdev-rd-${DEV}.png"
		if [ ! "x$RDPLOTLINES" = "x" ]; then
			RDPLOTLINES="$RDPLOTLINES,"
		fi
		THISPLOTLINE=" \"$DATAFILE\" using 3:6"
		THISPLOTLINE=" $THISPLOTLINE title \"$DEV\" with lines"
		RDPLOTLINES="$RDPLOTLINES $THISPLOTLINE"
		plot_blockdev_rd $PLOTFILE "$THISPLOTLINE"

		local PLOTFILE="blockdev/sar-per-blockdev-tps-${DEV}.png"
		if [ ! "x$TPSPLOTLINES" = "x" ]; then
			TPSPLOTLINES="$TPSPLOTLINES,"
		fi
		THISPLOTLINE=" \"$DATAFILE\" using 3:5"
		THISPLOTLINE=" $THISPLOTLINE title \"$DEV\" with lines"
		TPSPLOTLINES="$TPSPLOTLINES $THISPLOTLINE"
		plot_blockdev_tps $PLOTFILE "$THISPLOTLINE"

		local PLOTFILE="blockdev/sar-per-blockdev-util-${DEV}.png"
		if [ ! "x$UTILPLOTLINES" = "x" ]; then
			UTILPLOTLINES="$UTILPLOTLINES,"
		fi
		THISPLOTLINE=" \"$DATAFILE\" using 3:12"
		THISPLOTLINE=" $THISPLOTLINE title \"$DEV\" with lines"
		UTILPLOTLINES="$UTILPLOTLINES $THISPLOTLINE"
		plot_blockdev_util $PLOTFILE "$THISPLOTLINE"

		local PLOTFILE="blockdev/sar-per-blockdev-wd-${DEV}.png"
		if [ ! "x$WDPLOTLINES" = "x" ]; then
			WDPLOTLINES="$WDPLOTLINES,"
		fi
		THISPLOTLINE=" \"$DATAFILE\" using 3:7"
		THISPLOTLINE=" $THISPLOTLINE title \"$DEV\" with lines"
		WDPLOTLINES="$WDPLOTLINES $THISPLOTLINE"
		plot_blockdev_wd $PLOTFILE "$THISPLOTLINE"
	done
	plot_blockdev_rd 'sar-per-blockdev-rd.png' "$RDPLOTLINES"
	plot_blockdev_tps 'sar-per-blockdev-tps.png' "$TPSPLOTLINES"
	plot_blockdev_util 'sar-per-blockdev-util.png' "$UTILPLOTLINES"
	plot_blockdev_wd 'sar-per-blockdev-wd.png' "$WDPLOTLINES"

	rm -f $DATAFILES
}

plot_cpu() {
	local CSVFILE="sar-cpu.csv"

	# Create aggregated chart for all processors

	local DATAFILE=`tempfile`
	awk -F ";" 'NR == 1 || $4 == -1' $CSVFILE > $DATAFILE
	gnuplot <<- __EOF__
		datafile = "$DATAFILE"
		set datafile commentschar ""
		set datafile separator ";"
		set title "Processor Utilization"
		set xdata time
		set timefmt "%s"
		set terminal pngcairo size $SIZE
		set output 'sar-cpu.png'
		set xlabel "Time"
		set ylabel "% Utilization"
		set yrange [0:100]
		set xtics rotate
		set key below
		set grid
		plot for [i=5:8:1] \
			datafile using 3:(sum [col=i:8] column(col)) \
			title columnheader(i) \
			with lines
	__EOF__
	if [ $? -ne 0 ]; then
		exit 1
	fi
	rm -f $DATAFILE

	# Create % busy time per processor on a single chart.

	local DATAFILES=""
	local GNUPLOTLINE=""
	local CPUS=`awk -F ";" 'NR > 1 {print $4}' $CSVFILE | sort -nr | head -1`
	for CPU in `seq 0 $CPUS`; do
		local DATAFILE=`tempfile`
		DATAFILES="$DATAFILES $DATAFILE"
		awk -F ";" "NR == 1 || \$4 == $CPU" $CSVFILE > $DATAFILE

		if [ $CPU -gt 0 ]; then
			GNUPLOTLINE="$GNUPLOTLINE,"
		fi
		GNUPLOTLINE="$GNUPLOTLINE \"$DATAFILE\" using 3:(sum [col=5:8]"
		GNUPLOTLINE="$GNUPLOTLINE column(col)) title \"CPU$CPU\" with lines"
	done
	gnuplot <<- __EOF__
		set datafile separator ";"
		set title "Per Processor Utilization"
		set xdata time
		set timefmt "%s"
		set terminal pngcairo size $SIZE
		set output 'sar-per-cpu.png'
		set xlabel "Time"
		set ylabel "% Utilization"
		set yrange [0:100]
		set xtics rotate
		set key below
		set grid
		plot $GNUPLOTLINE
	__EOF__
	if [ $? -ne 0 ]; then
		exit 1
	fi
	rm -f $DATAFILES
}

plot_net_kb() {
	local FILE=$1
	local IFACE=$2

	gnuplot <<- __EOF__
		datafile = "$DATAFILE"
		set datafile separator ";"
		set title "Network Interface $IFACE"
		set xdata time
		set timefmt "%s"
		set terminal pngcairo size $SIZE
		set output "iface/sar-net-kb-${IFACE}.png"
		set xlabel "Time"
		set ylabel "kB/s"
		set yrange [0:*]
		set xtics rotate
		set key below
		set grid
		plot datafile using 3:7 title 'rx' with lines, \
			datafile using 3:8 title 'tx' with lines
	__EOF__
	if [ $? -ne 0 ]; then
		exit 1
	fi
}

plot_net() {
	local CSVFILE="sar-net.csv"

	mkdir -p iface

	local IFACES=`awk -F ";" 'NR > 1 {print $4}' $CSVFILE | sort -n | uniq`
	for IFACE in $IFACES; do
		local DATAFILE=`tempfile`

		DATAFILES="$DATAFILES $DATAFILE"
		awk -F ";" "NR == 1 || \$4 == \"$IFACE\"" $CSVFILE > $DATAFILE

		plot_net_kb $DATAFILE $IFACE
	done
	rm -f $DATAFILES
}

plot_swap() {
	gnuplot <<- __EOF__
		datafile = "sar-swap.csv"
		set datafile commentschar ""
		set datafile separator ";"
		set title "Swapping Activity"
		set xdata time
		set timefmt "%s"
		set terminal pngcairo size $SIZE
		set output 'sar-swapping.png'
		set xlabel "Time"
		set ylabel "pages / s"
		set yrange [0:*]
		set xtics rotate
		set key below
		set grid
		plot for [i=4:5:1] \
			datafile using 3:i \
			title columnheader(i) \
			with lines
	__EOF__
	if [ $? -ne 0 ]; then
		exit 1
	fi
}

SARDIR=""
while getopts "hi:s:" OPT; do
	case $OPT in
	h)
		usage
		exit 0
		;;
	i)
		SARDIR=$OPTARG
		;;
	s)
		SIZE=$OPTARG
		;;
	esac
done

if [ -z "$SARDIR" ]; then
	echo "ERROR: Specify sar directory with -i"
	exit 1
fi

which gnuplot > /dev/null 2>&1
if [ $? -ne 0 ]; then
	echo "WARNING: gnuplot not in path, sar charts not created"
	exit 0
fi

(cd $SARDIR && plot_blockdev)
(cd $SARDIR && plot_cpu)
(cd $SARDIR && plot_net)
(cd $SARDIR && plot_swap)

exit 0
