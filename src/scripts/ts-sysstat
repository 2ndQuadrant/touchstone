#!/bin/sh
#
# Copyright 2017-2019 PostgreSQL Global Development Group
#

usage() {
	echo "Usage: `basename $0` <options>"
	echo
	echo "Options:"
	echo "  -i <interval>  Interval (seconds) between samples, default 60"
	echo "  -o <path>      Path to save results"
	echo "  -s             Kill all stat collection processes with pids in -o <path>"
}

SARPIDFILE=""
PIDSTATPIDFILE=""
RAWSARFILE=""

OUTDIR=""
SAMPLE_LENGTH=60
STOP=0
while getopts "hi:o:s" OPT; do
	case $OPT in
	h)
		usage
		exit 0
		;;
	i)
		# FIXME: Test for valid integer
		SAMPLE_LENGTH=$OPTARG
		;;
	o)
		OUTDIR=$OPTARG
		mkdir -p $OUTDIR
		PIDSTATPIDFILE="$OUTDIR/pidstat.pid"
		SARPIDFILE="$OUTDIR/sar.pid"
		;;
	s)
		STOP=1
		;;
	esac
done

if [ -z "$OUTDIR" ]; then
	echo "ERROR: Specify output directory with -o"
	exit 1
fi

RAWSARFILE="$OUTDIR/sar_raw.out"

if [ $STOP -eq 1 ]; then
	for PIDFILE in $SARPIDFILE $PIDSTATPIDFILE; do
		read PID < $PIDFILE
		kill $PID
	done

	which sadf > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		# Make some reasonable guesses at what sadf flags are avaialble in
		# order of preference.  Otherwise give up and do not attempt to extract
		# anything from the raw sar data.
		while true; do
			SADF="sadf -d -U"
			$SADF 1 1 $RAWSARFILE > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				break
			fi

			SADF="sadf -D"
			$SADF 1 1 $RAWSARFILE > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				break
			fi

			echo "WARNING: Was not able to determine proper sadf flags"
			SADF="true"
		done
	else
		SADF=true
	fi

	SARDIR="$OUTDIR/sar"
	mkdir -p $SARDIR
	$SADF -P ALL $RAWSARFILE > $SARDIR/sar-cpu.csv
	$SADF $RAWSARFILE -- -B > $SARDIR/sar-paging.csv
	$SADF $RAWSARFILE -- -d -p > $SARDIR/sar-blockdev.csv
	# The -R flag was removed in v11.5.4
	$SADF 1 1 $RAWSARFILE -- -R > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		$SADF $RAWSARFILE -- -R > $SARDIR/sar-mem1.csv
		$SADF $RAWSARFILE -- -r > $SARDIR/sar-mem2.csv
	else
		$SADF $RAWSARFILE -- -r > $SARDIR/sar-mem.csv
	fi
	$SADF $RAWSARFILE -- -W > $SARDIR/sar-swap.csv
	$SADF $RAWSARFILE -- -n DEV > $SARDIR/sar-net.csv

	# Use sadf to generate svg charts if that options is avaialble.
	SADF="sadf -g"
	$SADF -P ALL $RAWSARFILE > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		exit 0
	fi
	$SADF -P ALL $RAWSARFILE > $SARDIR/sar-cpu.svg
	$SADF $RAWSARFILE -- -B > $SARDIR/sar-paging.svg
	$SADF $RAWSARFILE -- -d -p > $SARDIR/sar-blockdev.svg
	# The -R flag was removed in v11.5.4
	$SADF 1 1 $RAWSARFILE -- -R > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		$SADF $RAWSARFILE -- -R > $SARDIR/sar-mem1.svg
		$SADF $RAWSARFILE -- -r > $SARDIR/sar-mem2.svg
	else
		$SADF $RAWSARFILE -- -r > $SARDIR/sar-mem.svg
	fi
	$SADF $RAWSARFILE -- -W > $SARDIR/sar-swap.svg
	$SADF $RAWSARFILE -- -n DEV > $SARDIR/sar-net.svg

	exit 0
fi

which sar > /dev/null 2>&1
if [ $? -eq 0 ]; then
	SAR="sar"
else
	SAR="true"
fi

which pidstat > /dev/null 2>&1
if [ $? -eq 0 ]; then
	# Make some reasonable guesses at what pidstat flags are avaialble in order
	# of preference.  Otherwise give up and do not attempt to collect anything
	# from pidstat.
	while true; do
		PIDSTAT="pidstat -H -h -l -d -r -s -u -v -w"
		$PIDSTAT 1 1 > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			break
		fi

		PIDSTAT="pidstat -H -h -l -d -r -u -v -w"
		$PIDSTAT 1 1 > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			break
		fi

		echo "WARNING: Cannot determine proper pidstat flags"
		PIDSTAT="true"
	done
else
    PIDSTAT=true
fi

$SAR -o $RAWSARFILE $SAMPLE_LENGTH > $OUTDIR/sar.txt &
echo $! > $SARPIDFILE

$PIDSTAT $SAMPLE_LENGTH > $OUTDIR/pidstat.txt &
echo $! > $PIDSTATPIDFILE

exit 0
