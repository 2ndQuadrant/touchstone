#!/bin/sh
#
# Copyright 2017-2019 PostgreSQL Global Development Group
#

usage() {
	echo "Usage: `basename $0` <options> [COMMAND [ARGS]]"
	echo
	echo "Options:"
	echo "  -i <interval>  Interval (seconds) between samples, default 60"
	echo "  -o <path>      Path to save data"
	echo "  -s             Stop stat collection processes saving to -o <path>"
}

massage_pidstat() {
	local PIDSTATFILE="$OUTDIR/pidstat.txt"
	# Generate an index of pids and their command line information as a simple
	# text file.
	awk 'NR > 1 && NF > 1 && $1 != "#" {print $3, $25}' $PIDSTATFILE | \
			sort -n | uniq > $OUTDIR/pidstat-index.txt

	local PIDSTATCLEAN="$OUTDIR/pidstat-clean.txt"

	# Start the new CSV-like file with header information.
	head -n 3 $PIDSTATFILE | tail -n 1 > $PIDSTATCLEAN

	# Build an intermediate file with the redundant headers and empty lines
	# removed.  Use the original file's line number as a filler to the first column
	# that the hash (#) character/comment is going to indirectly produce as a side
	# effect of the data massaging.
	awk 'NR > 1 && NF > 1 && $1 != "#" {print NR, $0}' $PIDSTATFILE >> \
			$PIDSTATCLEAN

	# Determine the number of fields that are present in the pidstat output.
	local HEADER=`head -n 3 $PIDSTATFILE | tail -n 1`
	local CSVHEADER=`echo "$HEADER" | tr -s ' ' ';'`
	local COUNT=`echo $CSVHEADER | tr -cd ";" | wc -c`

	# Reconstruct the pidstat data with a CSV-like format.
	local PIDSTATCSV="$OUTDIR/pidstat.csv"
	echo -n > $PIDSTATCSV
	while read line; do
		# Preserve the entire command line information, if not the whitespace
		# between words.
		local COMMAND=$line
		for i in `seq 1 $COUNT`; do
			COMMAND=`echo $COMMAND | awk '{$1=""; print $0}'`
		done
		COMMAND=`echo $COMMAND | awk '$1=$1'`

		# Regurgitate the pidstat data as semicolon (;) delimited values.
		echo "`echo $line | tr -s ' ' ';' | cut -d ';' -f -$COUNT`;$COMMAND" \
				>> $PIDSTATCSV
	done < "$PIDSTATCLEAN"
}

process_sar() {
	which sadf > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		# Make some reasonable guesses at what sadf flags are available in
		# order of preference.  Otherwise give up and do not attempt to extract
		# anything from the raw sar data.
		while true; do
			SADF="sadf -d -U"
			$SADF 1 1 $DATAFILE > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				break
			fi

			SADF="sadf -D"
			$SADF 1 1 $DATAFILE > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				break
			fi

			echo "WARNING: Did not use sadf correctly"
			echo "WARNING: Was not able to determine proper sadf flags" >> \
					$OUTDIR/sadf.log
			return
		done
	else
		echo "WARNING: sadf not used to translate sar datafile"
		echo "sadf not in PATH: $PATH" >> $OUTDIR/sadf.log
		return
	fi

	SARDIR="$OUTDIR/sar"
	mkdir -p $SARDIR
	$SADF -P ALL $DATAFILE > $SARDIR/sar-cpu.csv
	$SADF $DATAFILE -- -B > $SARDIR/sar-paging.csv
	$SADF $DATAFILE -- -d -p > $SARDIR/sar-blockdev.csv
	# The -R flag was removed in sysstat v11.5.4
	$SADF 1 1 $DATAFILE -- -R > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		$SADF $DATAFILE -- -R > $SARDIR/sar-mem1.csv
		$SADF $DATAFILE -- -r > $SARDIR/sar-mem2.csv
	else
		$SADF $DATAFILE -- -r > $SARDIR/sar-mem.csv
	fi
	$SADF $DATAFILE -- -W > $SARDIR/sar-swap.csv
	$SADF $DATAFILE -- -n DEV > $SARDIR/sar-net.csv

	# Use sadf to generate svg charts if that options is available.
	SADF="sadf -g"
	$SADF -P ALL $DATAFILE > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		return
	fi
	$SADF -P ALL $DATAFILE > $SARDIR/sar-cpu.svg
	$SADF $DATAFILE -- -B > $SARDIR/sar-paging.svg
	$SADF $DATAFILE -- -d -p > $SARDIR/sar-blockdev.svg
	# The -R flag was removed in v11.5.4
	$SADF 1 1 $DATAFILE -- -R > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		$SADF $DATAFILE -- -R > $SARDIR/sar-mem1.svg
		$SADF $DATAFILE -- -r > $SARDIR/sar-mem2.svg
	else
		$SADF $DATAFILE -- -r > $SARDIR/sar-mem.svg
	fi
	$SADF $DATAFILE -- -W > $SARDIR/sar-swap.svg
	$SADF $DATAFILE -- -n DEV > $SARDIR/sar-net.svg
}

start_collectd() {
	which collectd > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		# Make custom copies of the collectd config in order to control where
		# the data is saved.
		ETCDIR=`dirname $0`
		ETCDIR="${ETCDIR}/../etc/touchstone"
		COLLECTDCONFTEMPLATE="${ETCDIR}/ts-collectd-sy.conf"
		COLLECTDCONF="${OUTDIR}/collectd-sy.conf"
		if [ -f $COLLECTDONF ]; then
			cp $COLLECTDCONFTEMPLATE $COLLECTDCONF
			cat >> $COLLECTDCONF <<- EOF
			<Plugin csv>
				DataDir "$OUTDIR/collectd"
				StoreRates false
			</Plugin>
			EOF
			collectd -C $COLLECTDCONF -P $COLLECTDSYPIDFILE
		fi
	else
		echo "WARNING: collectd not started"
		echo "collectd not in PATH: $PATH" >> $OUTDIR/collectd.log
	fi
}

start_iostat() {
	which iostat > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		IOSTAT="iostat"
	else
		echo "iostat not in PATH: $PATH" >> $OUTDIR/iostat.log
		return
	fi

	$IOSTAT -dxh $SAMPLE_LENGTH > $OUTDIR/iostat.txt &
	echo $! > $IOSTATPIDFILE
}

start_pidstat() {
	which pidstat > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		# Make some reasonable guesses at what pidstat flags are available in
		# order of preference.  Otherwise give up and do not attempt to collect
		# anything from pidstat.
		while true; do
			PIDSTAT="pidstat -H -h -l -d -r -s -u -v -w"
			$PIDSTAT 1 1 > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				break
			fi

			PIDSTAT="pidstat -H -h -l -d -r -u -v -w"
			$PIDSTAT 1 1 > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				break
			fi

			# sysstat v10.1.5
			PIDSTAT="pidstat -h -l -d -r -u -w"
			$PIDSTAT 1 1 > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				break
			fi

			echo "WARNING: Did not use pidstat correctly"
			echo "WARNING: Cannot determine proper pidstat flags" >> \
					$OUTDIR/pidstat.log
			return
		done
	else
		echo "WARNING: pidstat not started"
		echo "pidstat not in PATH: $PATH" >> $OUTDIR/pidstat.log
		return
	fi

	$PIDSTAT $SAMPLE_LENGTH > $OUTDIR/pidstat.txt &
	echo $! > $PIDSTATPIDFILE
}

start_sar() {
	which sar > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		SAR="sar"
	else
		echo "sar not in PATH: $PATH" >> $OUTDIR/sar.log
		return
	fi

	$SAR -o $DATAFILE $SAMPLE_LENGTH > $OUTDIR/sar.txt &
	echo $! > $SARPIDFILE
}

stop_collection() {
	for PIDFILE in $IOSTATPIDFILE $SARPIDFILE $PIDSTATPIDFILE $COLLECTDSYPIDFILE; do
		if [ -f $PIDFILE ]; then
			read PID < $PIDFILE
			kill $PID
			rm -f $PIDFILE
		fi
	done
}

COLLECTDSYPIDFILE=""
IOSTATPIDFILE=""
SARPIDFILE=""
PIDSTATPIDFILE=""
DATAFILE=""

OUTDIR=""
SAMPLE_LENGTH=60
STOP=0
while getopts "hi:o:s" OPT; do
	case $OPT in
	h)
		usage
		exit 0
		;;
	i)
		# FIXME: Test for valid integer
		SAMPLE_LENGTH=$OPTARG
		;;
	o)
		OUTDIR=$OPTARG
		mkdir -p $OUTDIR
		IOSTATPIDFILE="$OUTDIR/iostat.pid"
		PIDSTATPIDFILE="$OUTDIR/pidstat.pid"
		SARPIDFILE="$OUTDIR/sar.pid"
		COLLECTDSYPIDFILE="$OUTDIR/collectd-sy.pid"
		;;
	s)
		STOP=1
		;;
	esac
done

if [ -z "$OUTDIR" ]; then
	echo "ERROR: Specify directory to save data with -o"
	exit 1
fi

shift $(($OPTIND - 1))

DATAFILE="$OUTDIR/sar.datafile"

if [ $STOP -eq 1 ]; then
	stop_collection
	massage_pidstat
	process_sar
	exit 0
fi

start_sar &
start_iostat &
start_pidstat &
start_collectd &

if [ ! "x$*" = "x" ]; then
	$*
	stop_collection
	massage_pidstat
	process_sar
fi

exit 0
